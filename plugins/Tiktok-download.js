const { cmd } = require('../command');
const { getVideoMeta } = require('tiktok-scraper');
const axios = require('axios');
const fs = require('fs');
const path = require('path');

cmd({
  pattern: "tiktok",
  alias: ["tt", "ttdl"],
  desc: "Download TikTok videos with options",
  category: "download",
  react: "‚¨áÔ∏è",
  filename: __filename
}, async (messageHandler, { from, reply, quoted, args }) => {
  try {
    if (!args[0]) return reply("‚ö†Ô∏è *‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª TikTok ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù URL ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂á‡∂≠‡∑î‡∑Ö‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±!*\n‡∂ã‡∂Ø‡∑è: .tt https://vm.tiktok.com/XYZ");

    const processingMsg = await reply("‚è≥ *TikTok ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù‡∑Ä ‡∑Ä‡∑í‡∑Å‡∑ä‡∂Ω‡∑ö‡∑Ç‡∂´‡∂∫ ‡∂ö‡∂ª‡∂∏‡∑í‡∂±‡∑ä...*");

    // Get TikTok video metadata
    const meta = await getVideoMeta(args[0]);
    const videoData = meta.collector[0];
    
    // Prepare options message
    let optionsMsg = `*‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ*\n`;
    optionsMsg += `       *TikTok ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù‡∑Ä*       \n\n`;
    optionsMsg += `üé¨ *‡∂∏‡∑è‡∂≠‡∑ò‡∂ö‡∑è‡∑Ä:* ${videoData.text || '‡∂±‡∑ú‡∂∏‡∑ê‡∂≠'}\n`;
    optionsMsg += `üë§ *‡∂±‡∑í‡∂ª‡∑ä‡∂∏‡∑è‡∂≠‡∑ò:* ${videoData.authorMeta.name}\n`;
    optionsMsg += `‚ù§Ô∏è *‡∂Ω‡∂∫‡∑í‡∂ö‡∑ä:* ${videoData.diggCount.toLocaleString()}\n`;
    optionsMsg += `üí¨ *‡∂Ö‡∂Ø‡∑Ñ‡∑É‡∑ä:* ${videoData.commentCount.toLocaleString()}\n`;
    optionsMsg += `‚è±Ô∏è *‡∂ö‡∑è‡∂Ω‡∂∫:* ${videoData.videoMeta.duration}s\n\n`;
    optionsMsg += `*‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö ‡∑Ä‡∑í‡∂ö‡∂Ω‡∑ä‡∂¥ ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±:*\n\n`;
    optionsMsg += `1Ô∏è‚É£ - ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù‡∑Ä (‡∂¢‡∂Ω ‡∑É‡∂Ω‡∂ö‡∑î‡∂´‡∑î ‡∂±‡∑ê‡∂≠‡∑í‡∑Ä)\n`;
    optionsMsg += `2Ô∏è‚É£ - ‡∑Å‡∑ä‚Äç‡∂ª‡∑Ä‡∑ä‚Äç‡∂∫ ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä\n`;
    optionsMsg += `3Ô∏è‚É£ - ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä\n\n`;
    optionsMsg += `*Rasiya-MD ‡∂∂‡∑ú‡∂ß‡∑ä* üá±üá∞\n`;
    optionsMsg += `*‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ*`;

    const sentMessage = await messageHandler.sendMessage(from, {
      image: { url: videoData.covers.default },
      caption: optionsMsg
    }, { quoted: quoted });

    // Store video data temporarily
    messageHandler.tiktokData = messageHandler.tiktokData || {};
    messageHandler.tiktokData[from] = {
      videoUrl: videoData.videoUrl,
      audioUrl: videoData.musicMeta.musicUrl,
      metadata: {
        title: videoData.text,
        author: videoData.authorMeta.name,
        duration: videoData.videoMeta.duration
      },
      timestamp: Date.now()
    };

    // Delete processing message
    await messageHandler.deleteMessage(from, processingMsg.key);

    // Handle user response
    messageHandler.ev.on("messages.upsert", async (update) => {
      const message = update.messages[0];
      if (!message.message || !message.message.extendedTextMessage) return;

      const userReply = message.message.extendedTextMessage.text.trim();
      const context = message.message.extendedTextMessage.contextInfo;

      if (context.stanzaId === sentMessage.key.id) {
        const { videoUrl, audioUrl, metadata } = messageHandler.tiktokData[from] || {};

        if (!videoUrl) {
          return reply("‚ùå *‡∑É‡∑ê‡∑É‡∑í‡∂∫ ‡∂ö‡∂Ω‡∑ä ‡∂â‡∂ö‡∑î‡∂≠‡∑ä ‡∑Ä‡∑ì ‡∂á‡∂≠! ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.*");
        }

        try {
          switch(userReply) {
            case '1': // Video download
              await reply("‚è≥ *‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù‡∑Ä ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∂ª‡∂∏‡∑í‡∂±‡∑ä...*");
              
              const videoPath = path.join(__dirname, '../temp', `tiktok_${Date.now()}.mp4`);
              const writer = fs.createWriteStream(videoPath);
              const videoResponse = await axios.get(videoUrl, { responseType: 'stream' });
              videoResponse.data.pipe(writer);

              await new Promise((resolve, reject) => {
                writer.on('finish', resolve);
                writer.on('error', reject);
              });

              await messageHandler.sendMessage(from, {
                video: fs.readFileSync(videoPath),
                caption: `üé¨ *${metadata.title || 'TikTok ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù‡∑Ä'}*\nüë§ ${metadata.author}\n‚è±Ô∏è ${metadata.duration}s\n\n*Rasiya-MD* üá±üá∞`
              }, { quoted: quoted });

              fs.unlinkSync(videoPath);
              break;

            case '2': // Audio only
              await reply("‚è≥ *‡∑Å‡∑ä‚Äç‡∂ª‡∑Ä‡∑ä‚Äç‡∂∫ ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∂ª‡∂∏‡∑í‡∂±‡∑ä...*");
              
              const audioPath = path.join(__dirname, '../temp', `tiktok_audio_${Date.now()}.mp3`);
              const audioWriter = fs.createWriteStream(audioPath);
              const audioResponse = await axios.get(audioUrl, { responseType: 'stream' });
              audioResponse.data.pipe(audioWriter);

              await new Promise((resolve, reject) => {
                audioWriter.on('finish', resolve);
                audioWriter.on('error', reject);
              });

              await messageHandler.sendMessage(from, {
                audio: fs.readFileSync(audioPath),
                mimetype: 'audio/mpeg',
                ptt: false,
                caption: `üéµ *TikTok ‡∑Å‡∑ä‚Äç‡∂ª‡∑Ä‡∑ä‚Äç‡∂∫‡∂∫*\nüë§ ${metadata.author}\n‚è±Ô∏è ${metadata.duration}s\n\n*Rasiya-MD* üá±üá∞`
              }, { quoted: quoted });

              fs.unlinkSync(audioPath);
              break;

            case '3': // Info only
              await reply("‚ÑπÔ∏è *‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂∏‡∑í‡∂±‡∑ä...*");
              break;

            default:
              await reply("‚ö†Ô∏è *‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∑Ä‡∑í‡∂ö‡∂Ω‡∑ä‡∂¥‡∂∫‡∂ö‡∑ä ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±! (1, 2 ‡∑Ñ‡∑ù 3)*");
              return;
          }
        } catch (error) {
          console.error(error);
          reply("‚ùå *‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í‡∑Ä‡∑í‡∂∫!*");
        } finally {
          delete messageHandler.tiktokData[from];
        }
      }
    });
  } catch (error) {
    console.error(error);
    reply("‚ùå *‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù‡∑Ä ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í‡∑Ä‡∑í‡∂∫!*");
  }
});
