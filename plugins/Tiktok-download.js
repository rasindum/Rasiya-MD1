const { cmd } = require('../command');
const { getVideoMeta } = require('tiktok-scraper');
const axios = require('axios');
const fs = require('fs');
const path = require('path');

cmd({
  pattern: "tiktok",
  alias: ["tt", "ttdl"],
  desc: "Download high quality TikTok videos",
  category: "download",
  react: "‚¨áÔ∏è",
  filename: __filename
}, async (messageHandler, { from, reply, quoted, args }) => {
  try {
    // Validate input
    if (!args[0]) {
      return reply("‚ö†Ô∏è *‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª TikTok ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù URL ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂á‡∂≠‡∑î‡∑Ö‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±!*\n‡∂ã‡∂Ø‡∑è: .tt https://vm.tiktok.com/XYZ");
    }

    // Validate URL format
    if (!args[0].match(/tiktok\.com|vm\.tiktok\.com|vt\.tiktok\.com/)) {
      return reply("‚ùå *‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂±‡∑ú‡∑Ä‡∂± TikTok URL!* ‡∂î‡∂∂‡∂ú‡∑ö URL ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.");
    }

    const processingMsg = await reply("‚è≥ *TikTok ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù‡∑Ä ‡∑Ä‡∑í‡∑Å‡∑ä‡∂Ω‡∑ö‡∑Ç‡∂´‡∂∫ ‡∂ö‡∂ª‡∂∏‡∑í‡∂±‡∑ä...*");

    try {
      // Get TikTok video metadata with timeout
      const meta = await Promise.race([
        getVideoMeta(args[0]),
        new Promise((_, reject) => setTimeout(() => reject(new Error('Request timeout')), 30000))
      ]);

      if (!meta || !meta.collector || meta.collector.length === 0) {
        throw new Error('No video data found');
      }

      const videoData = meta.collector[0];
      
      // Prepare options message
      let optionsMsg = `*‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ*\n`;
      optionsMsg += `       *TikTok ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù‡∑Ä*       \n\n`;
      optionsMsg += `üé¨ *‡∂∏‡∑è‡∂≠‡∑ò‡∂ö‡∑è‡∑Ä:* ${videoData.text || '‡∂±‡∑ú‡∂∏‡∑ê‡∂≠'}\n`;
      optionsMsg += `üë§ *‡∂±‡∑í‡∂ª‡∑ä‡∂∏‡∑è‡∂≠‡∑ò:* ${videoData.authorMeta?.name || '‡∂±‡∑ú‡∂Ø‡∂±‡∑ì'}\n`;
      optionsMsg += `‚ù§Ô∏è *‡∂Ω‡∂∫‡∑í‡∂ö‡∑ä:* ${videoData.diggCount?.toLocaleString() || '0'}\n`;
      optionsMsg += `‚è±Ô∏è *‡∂ö‡∑è‡∂Ω‡∂∫:* ${videoData.videoMeta?.duration || 'N/A'}s\n\n`;
      optionsMsg += `*‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö ‡∑Ä‡∑í‡∂ö‡∂Ω‡∑ä‡∂¥ ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±:*\n\n`;
      optionsMsg += `1Ô∏è‚É£ - ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù‡∑Ä (‡∂¢‡∂Ω ‡∑É‡∂Ω‡∂ö‡∑î‡∂´‡∑î ‡∂±‡∑ê‡∂≠‡∑í‡∑Ä)\n`;
      optionsMsg += `2Ô∏è‚É£ - ‡∑Å‡∑ä‚Äç‡∂ª‡∑Ä‡∑ä‚Äç‡∂∫ ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä\n\n`;
      optionsMsg += `*Rasiya-MD ‡∂∂‡∑ú‡∂ß‡∑ä* üá±üá∞\n`;
      optionsMsg += `*‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ*`;

      const sentMessage = await messageHandler.sendMessage(from, {
        image: { url: videoData.covers?.default || '' },
        caption: optionsMsg
      }, { quoted: quoted });

      // Store video data temporarily
      messageHandler.tiktokTemp = {
        videoUrl: videoData.videoUrl,
        audioUrl: videoData.musicMeta?.musicUrl,
        timestamp: Date.now()
      };

      // Set up response handler
      const responseHandler = async (message) => {
        if (!message.message?.extendedTextMessage || 
            message.key.remoteJid !== from ||
            message.message.extendedTextMessage.contextInfo.stanzaId !== sentMessage.key.id) {
          return;
        }

        const userChoice = message.message.extendedTextMessage.text.trim();
        
        try {
          if (!['1', '2'].includes(userChoice)) {
            await reply("‚ö†Ô∏è *‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂±‡∑ú‡∑Ä‡∂± ‡∂≠‡∑ö‡∂ª‡∑ì‡∂∏! ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª 1 ‡∑Ñ‡∑ù 2 ‡∂Ω‡∑ô‡∑É ‡∂∫‡∑ú‡∂∏‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.*");
            return;
          }

          await reply("‚è≥ *‡∂î‡∂∂‡∂ú‡∑ö ‡∂â‡∂Ω‡∑ä‡∂Ω‡∑ì‡∂∏ ‡∑É‡∂ö‡∑É‡∂∏‡∑í‡∂±‡∑ä...*");

          const downloadType = userChoice === '1' ? 'video' : 'audio';
          const filePath = path.join(__dirname, '../temp', `tiktok_${Date.now()}.${downloadType === 'video' ? 'mp4' : 'mp3'}`);
          const downloadUrl = downloadType === 'video' ? messageHandler.tiktokTemp.videoUrl : messageHandler.tiktokTemp.audioUrl;

          // Download the file
          const writer = fs.createWriteStream(filePath);
          const response = await axios({
            method: 'get',
            url: downloadUrl,
            responseType: 'stream',
            timeout: 60000
          });

          response.data.pipe(writer);

          await new Promise((resolve, reject) => {
            writer.on('finish', resolve);
            writer.on('error', reject);
          });

          // Send the file
          if (downloadType === 'video') {
            await messageHandler.sendMessage(from, {
              video: fs.readFileSync(filePath),
              caption: `üé¨ *TikTok ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù‡∑Ä*\nüë§ ${videoData.authorMeta?.name || ''}\n\n*Rasiya-MD* üá±üá∞`
            }, { quoted: quoted });
          } else {
            await messageHandler.sendMessage(from, {
              audio: fs.readFileSync(filePath),
              mimetype: 'audio/mpeg',
              ptt: false,
              caption: `üéµ *TikTok ‡∑Å‡∑ä‚Äç‡∂ª‡∑Ä‡∑ä‚Äç‡∂∫‡∂∫*\nüë§ ${videoData.authorMeta?.name || ''}\n\n*Rasiya-MD* üá±üá∞`
            }, { quoted: quoted });
          }

          // Clean up
          fs.unlinkSync(filePath);

        } catch (error) {
          console.error('Download error:', error);
          await reply("‚ùå *‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í‡∑Ä‡∑í‡∂∫!*");
        } finally {
          // Remove listener after processing
          messageHandler.ev.off('messages.upsert', responseHandler);
        }
      };

      // Add listener for user response
      messageHandler.ev.on('messages.upsert', responseHandler);

      // Set timeout to remove listener if no response
      setTimeout(() => {
        messageHandler.ev.off('messages.upsert', responseHandler);
      }, 60000);

    } catch (error) {
      console.error('Metadata error:', error);
      throw new Error('‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù ‡∂≠‡∑ú‡∂ª‡∂≠‡∑î‡∂ª‡∑î ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑É‡∂∏‡∂≠‡∑ä ‡∑Ä‡∑í‡∂∫');
    } finally {
      await messageHandler.deleteMessage(from, processingMsg.key);
    }

  } catch (error) {
    console.error('Main error:', error);
    reply(`‚ùå *‡∂Ø‡∑ù‡∑Ç‡∂∫:* ${error.message || '‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù‡∑Ä ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í‡∑Ä‡∑í‡∂∫!'}`);
  }
});
