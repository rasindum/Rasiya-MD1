const { cmd, commands } = require('../command');
const yts = require('yt-search');
const ddownr = require('denethdev-ytmp3');
const fs = require('fs');
const axios = require('axios');

cmd({
  pattern: "song",
  desc: "Download high quality songs.",
  category: "download",
  react: 'üéß',
  filename: __filename
}, async (messageHandler, context, quotedMessage, { from, reply, q }) => {
  try {
    if (!q) return reply("*‡∂¥‡∑í‡∂Ω‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂ú‡∑ì‡∂≠‡∂∫‡∑ö ‡∂±‡∂∏ ‡∑Ñ‡∑ù YouTube ‡∂Ω‡∑í‡∂±‡∑ä‡∂ö‡∑î‡∑Ä ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±* üéµ\n\n_‡∂ã‡∂Ø‡∑è: .song shape of you_");

    // Searching animation
    let searchingMsg = await reply("*üîç Rasiya Bot ‡∂î‡∂∂‡∂ú‡∑ö ‡∂ú‡∑ì‡∂≠‡∂∫ ‡∑É‡∑ú‡∂∫‡∂∏‡∑í‡∂±‡∑ä ‡∑É‡∑í‡∂ß‡∑ì...*");
    
    // Search for the song
    const searchResults = await yts(q);
    if (!searchResults || searchResults.videos.length === 0) {
      await messageHandler.sendMessage(from, { 
        delete: searchingMsg.key 
      });
      return reply("*‡∂∏‡∂ß ‡∂î‡∂∂‡∂ú‡∑ö ‡∂ú‡∑ì‡∂≠‡∂∫ ‡∑É‡∑ú‡∂∫‡∑è‡∂ú‡∂≠ ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∑Ä‡∑í‡∂∫ üòî*");
    }

    const songData = searchResults.videos[0];
    const songUrl = songData.url;

    // Delete searching message
    await messageHandler.sendMessage(from, { 
      delete: searchingMsg.key 
    });

    // Send song details with progress
    let progressMessage = await messageHandler.sendMessage(from, {
      image: { url: songData.thumbnail },
      caption: `*üéµ Rasiya Music Downloader*\n\n` +
               `*üìå ‡∂ú‡∑ì‡∂≠‡∂∫:* ${songData.title}\n` +
               `*üëÅ‚Äçüó® ‡∂∂‡∑ê‡∂Ω‡∑ì‡∂∏‡∑ä:* ${songData.views}\n` +
               `*‚è± ‡∂ö‡∑è‡∂Ω‡∂∫:* ${songData.timestamp}\n` +
               `*üìÖ ‡∂ã‡∂©‡∑î‡∂ú‡∂≠ ‡∂ö‡∂Ω‡∑ö:* ${songData.ago}\n` +
               `*üé§ ‡∂ú‡∑è‡∂∫‡∂ö‡∂∫‡∑è:* ${songData.author.name}\n\n` +
               `*‚¨áÔ∏è ‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏ ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∑Ä‡∑ô‡∂∏‡∑í‡∂±‡∑ä...*\n` +
               `‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ± 0%\n\n` +
               `_Rasiya Bot ¬© 2024 | Premium Quality_`
    }, { quoted: quotedMessage });

    // Progress update function
    const updateProgress = async (percentage) => {
      const progressBar = '‚ñ∞'.repeat(Math.floor(percentage/10)) + '‚ñ±'.repeat(10 - Math.floor(percentage/10));
      await messageHandler.sendMessage(from, {
        edit: progressMessage.key,
        image: { url: songData.thumbnail },
        caption: `*üéµ Rasiya Music Downloader*\n\n` +
                 `*üìå ‡∂ú‡∑ì‡∂≠‡∂∫:* ${songData.title}\n` +
                 `*üëÅ‚Äçüó® ‡∂∂‡∑ê‡∂Ω‡∑ì‡∂∏‡∑ä:* ${songData.views}\n` +
                 `*‚è± ‡∂ö‡∑è‡∂Ω‡∂∫:* ${songData.timestamp}\n\n` +
                 `*‚¨áÔ∏è ‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏...*\n` +
                 `${progressBar} ${percentage}%\n\n` +
                 `_Rasiya Bot ¬© 2024 | Premium Quality_`
      });
    };

    // Simulate download progress
    for (let i = 10; i <= 100; i += 10) {
      await new Promise(resolve => setTimeout(resolve, 500));
      await updateProgress(i);
    }

    // Actual download
    const result = await ddownr.download(songUrl, 'mp3');
    const downloadLink = result.downloadUrl;

    // Uploading animation
    await updateProgress(100);
    let uploadingMsg = await messageHandler.sendMessage(from, {
      edit: progressMessage.key,
      image: { url: songData.thumbnail },
      caption: `*üéµ Rasiya Music Downloader*\n\n` +
               `*üìå ‡∂ú‡∑ì‡∂≠‡∂∫:* ${songData.title}\n\n` +
               `*üì§ ‡∂î‡∂∂‡∂ú‡∑ö ‡∂ú‡∑ì‡∂≠‡∂∫ ‡∂ã‡∂©‡∑î‡∂ú‡∂≠ ‡∑Ä‡∑ô‡∂∏‡∑í‡∂±‡∑ä...*\n` +
               `‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞ 100%\n\n` +
               `_Rasiya Bot ¬© 2024 | Premium Quality_`
    });

    // Simulate upload progress
    for (let i = 10; i <= 100; i += 10) {
      await new Promise(resolve => setTimeout(resolve, 300));
      await messageHandler.sendMessage(from, {
        edit: uploadingMsg.key,
        image: { url: songData.thumbnail },
        caption: `*üéµ Rasiya Music Downloader*\n\n` +
                 `*üìå ‡∂ú‡∑ì‡∂≠‡∂∫:* ${songData.title}\n\n` +
                 `*üì§ ‡∂ã‡∂©‡∑î‡∂ú‡∂≠ ‡∑Ä‡∑ô‡∂∏‡∑í‡∂±‡∑ä...*\n` +
                 `${'‚ñ∞'.repeat(i/10)}${'‚ñ±'.repeat(10-(i/10))} ${i}%\n\n` +
                 `_Rasiya Bot ¬© 2024 | Premium Quality_`
      });
    }

    // Send format options
    await messageHandler.sendMessage(from, {
      edit: uploadingMsg.key,
      image: { url: songData.thumbnail },
      caption: `*üéµ Rasiya Music Downloader*\n\n` +
               `*‚úÖ ‡∂ú‡∑ì‡∂≠‡∂∫ ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂∂‡∑è‡∂ú‡∂≠‡∑ä‡∂≠‡∑è!*\n\n` +
               `*‡∂î‡∂∂‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∂Ü‡∂ö‡∑ò‡∂≠‡∑í‡∂∫ ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±:*\n` +
               `1. üéß ‡∂ú‡∑ì‡∂≠‡∂∫ ‡∂Ω‡∑ô‡∑É (audio)\n` +
               `2. üìÅ ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä ‡∂Ω‡∑ô‡∑É (document)\n\n` +
               `_Rasiya Bot ¬© 2024 | Premium Quality_`
    });

    // Handle user's choice
    messageHandler.ev.once("messages.upsert", async (update) => {
      const message = update.messages[0];
      if (!message.message || !message.message.extendedTextMessage) return;

      const userReply = message.message.extendedTextMessage.text.trim();

      if (message.message.extendedTextMessage.contextInfo.stanzaId === uploadingMsg.key.id) {
        try {
          // Downloading animation
          let sendingMsg = await messageHandler.sendMessage(from, {
            image: { url: songData.thumbnail },
            caption: `*üéµ Rasiya Music Downloader*\n\n` +
                     `*üìå ‡∂ú‡∑ì‡∂≠‡∂∫:* ${songData.title}\n\n` +
                     `*üì© ‡∂î‡∂∂‡∂ú‡∑ö ‡∂ú‡∑ì‡∂≠‡∂∫ ‡∂∫‡∑Ä‡∂∏‡∑í‡∂±‡∑ä...*\n` +
                     `‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ± 30%\n\n` +
                     `_Rasiya Bot ¬© 2024 | Premium Quality_`
          });

          // Update progress
          await new Promise(resolve => setTimeout(resolve, 1500));
          await messageHandler.sendMessage(from, {
            edit: sendingMsg.key,
            image: { url: songData.thumbnail },
            caption: `*üéµ Rasiya Music Downloader*\n\n` +
                     `*üìå ‡∂ú‡∑ì‡∂≠‡∂∫:* ${songData.title}\n\n` +
                     `*üì© ‡∂∫‡∑Ä‡∂∏‡∑í‡∂±‡∑ä...*\n` +
                     `‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ±‚ñ± 80%\n\n` +
                     `_Rasiya Bot ¬© 2024 | Premium Quality_`
          });

          // Send the actual file
          switch (userReply) {
            case '1':
              await messageHandler.sendMessage(from, {
                audio: { url: downloadLink },
                mimetype: "audio/mpeg",
                contextInfo: {
                  mentionedJid: [message.message.extendedTextMessage.contextInfo.participant]
                }
              }, { quoted: quotedMessage });
              break;
            case '2':
              await messageHandler.sendMessage(from, {
                document: { url: downloadLink },
                mimetype: 'audio/mpeg',
                fileName: `${songData.title}.mp3`,
                caption: `*üéµ ${songData.title}*\n\n` +
                         `_Rasiya Bot ¬© 2024 | Premium Quality_`,
                contextInfo: {
                  mentionedJid: [message.message.extendedTextMessage.contextInfo.participant]
                }
              }, { quoted: quotedMessage });
              break;
            default:
              reply("*‚ùå ‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í ‡∂≠‡∑ö‡∂ª‡∑ì‡∂∏‡∂ö‡∑ä! 1 ‡∑Ñ‡∑ù 2 ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±*");
              return;
          }

          // Complete message
          await messageHandler.sendMessage(from, {
            edit: sendingMsg.key,
            image: { url: songData.thumbnail },
            caption: `*üéµ Rasiya Music Downloader*\n\n` +
                     `*üìå ‡∂ú‡∑ì‡∂≠‡∂∫:* ${songData.title}\n\n` +
                     `*‚úÖ ‡∂ú‡∑ì‡∂≠‡∂∫ ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂∫‡∑Ä‡∂± ‡∂Ω‡∂Ø‡∑ì!*\n\n` +
                     `_Rasiya Bot ¬© 2024 | Premium Quality_`
          });

        } catch (error) {
          console.error(error);
          reply("*‚ùå ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í‡∑Ä‡∑í‡∂∫! ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±*");
        }
      }
    });

  } catch (error) {
    console.error(error);
    reply("*‚ùå ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í‡∑Ä‡∑í‡∂∫! ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±*");
  }
});
